openapi: 3.0.3
info:
  title: Social Network API
  description: Social Network API
  version: 1.0.0
servers:
  - url: 'https'
paths:
  /v1/users/{userId}/friends/{friendId}:
    post:
      tags:
        - Friends
      summary: Add user to friends
      responses:
        '201':
          description: Created
        '404':
          description: User not found
          content:
            application/json:
              example:
                error: User not found
        '422':
          description: Unprocessable entity
          content:
            application/json:
              example:
                error: Unprocessable entity
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                error: Internal server error

      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: friendId
          in: path
          required: true
          schema:
            type: string
            format: uuid
    delete:
      tags:
        - Friends
      summary: Delete user from friends
      responses:
        '204':
          description: Deleted
        '404':
          description: User not found
          content:
            application/json:
              example:
                error: User not found
        '422':
          description: Unprocessable entity
          content:
            application/json:
              example:
                error: Unprocessable entity
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                error: Internal server error
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: friendId
          in: path
          required: true
          schema:
            type: string
            format: uuid
  /v1/users/{userId}/friends:
    get:
      tags:
        - Friends
      summary: Get user friends
      responses:
        '200':
          description: User friends
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFriendsResponse'
        '404':
          description: User not found
          content:
            application/json:
              example:
                error: User not found
        '422':
          description: Unprocessable entity
          content:
            application/json:
              example:
                error: Unprocessable entity
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                error: Internal server error
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: offset
          in: query
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          required: false
          schema:
            type: integer
  /v1/users/{userId}:
    get:
      tags:
        - Profile
      summary: Get user profile
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'
        '404':
          description: User not found
          content:
            application/json:
              example:
                error: User not found
        '422':
          description: Unprocessable entity
          content:
            application/json:
              example:
                error: Unprocessable entity
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                error: Internal server error
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
  /v1/posts:
    get:
      tags:
        - Posts
      summary: Get posts feed
      responses:
        '200':
          description: User posts
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    items:
                      $ref: "#/components/schemas/Post"
                  meta:
                    $ref: "#/components/schemas/Meta"
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: Unauthorized
        '404':
          description: User not found
          content:
            application/json:
              example:
                error: User not found
        '422':
          description: Unprocessable entity
          content:
            application/json:
              example:
                error: Unprocessable entity
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                error: Internal server error
    post:
      tags:
        - Posts
      summary: Create a new post
      responses:
        '201':
          description: Created
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: Unauthorized
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              example:
                error: Validation failed
                details:
                  - field: "title"
                    message: "Title must not be empty"
                  - field: "body"
                    message: "Body must not be empty"
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                error: Internal server error
      requestBody:
        description: New post details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPostRequest'
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
  /v1/media:
    post:
      tags:
        - Media
      summary: Upload media files
      responses:
        '201':
          description: Created
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: Unauthorized
        '404':
          description: Entity not found
          content:
            application/json:
              example:
                error: Entity not found
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              example:
                error: Validation failed
                details:
                  - field: "media"
                    message: "Media files list can't be empty"
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                error: Internal server error
      requestBody:
        description: Media files for post
        required: true
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/MediaListRequest'

  /v1/chats:
    get:
      tags:
        - Chats
      summary: Get user chats
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChatsResponse"
        '404':
          description: User not found
          content:
            application/json:
              example:
                error: User not found
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                error: Internal server error
    parameters:
      - name: offset
        in: query
        required: false
        schema:
          type: integer
      - name: limit
        in: query
        required: false
        schema:
          type: integer


  /v1/chats/{chatId}:
    get:
      tags:
        - Chats
      summary: Get chat messages
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    items:
                      $ref: "#/components/schemas/ChatMessage"
                  meta:
                    $ref: "#/components/schemas/Meta"
        '404':
          description: Chat not found
          content:
            application/json:
              example:
                error: Chat not found
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                error: Internal server error
      parameters:
        - name: offset
          in: query
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          required: false
          schema:
            type: integer
    post:
      tags:
        - Chats
      summary: Send mesage to chat
      responses:
        '201':
          description: Created
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: Unauthorized
        '404':
          description: Chat not found
          content:
            application/json:
              example:
                error: Chat not found
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              example:
                error: Validation failed
                details:
                  - field: "text"
                    message: "Message text must not be empty"
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                error: Internal server error

      requestBody:
        description: New chat message
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewChatMessageRequest'
              
components:
  schemas:
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
    ErrorResult:
      type: object
      properties:
        success:
          type: boolean
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    SuccessResult:
      type: object
      properties:
        result:
          type: boolean
    Friend:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        lastname:
          type: string
        middlename:
          type: string
        nickname:
          type: string
        birthdate:
          type: string
        avatar_url:
          type: string
    Meta:
      type: object
      properties:
        pagination:
          type: object
          properties:
            currentPage:
              type: integer
            pageSize:
              type: integer
            totalPages:
              type: integer

    GetFriendsResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/Friend'
        meta:
          $ref: '#/components/schemas/Meta'

    UserProfileResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        lastname:
          type: string
        middlename:
          type: string
        nickname:
          type: string
        birthdate:
          type: string
        avatar_url:
          type: string
        interests:
          type: array
          items:
            - type: string
    MediaListRequest:
      type: object
      properties:
        entity_type:
          type: string
          enum:
            - post
            - chatMessage
            - user
        entity_id:
          type: string
          format: uuid
        media:
          type: array
          items:
            - type: string
              format: binary
              example: [ binary data ]

    NewPostRequest:
      type: object
      properties:
        title:
          type: string
        body:
          type: string

    Post:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        body:
          type: string
        media:
          type: array
          items:
            - type: string
    ChatsResponse:
      type: object
      properties:
        chats:
          type: array
          items:
            $ref: "#/components/schemas/Chat"
        meta:
          $ref: "#/components/schemas/Meta"
    Chat:
      type: object
      properties:
        id:
          type: string
          format: uuid
        members:
          type: array
          items:
            - type: string
        last_message:
          $ref: "#/components/schemas/ChatMessage"
    ChatMessage:
      type: object
      properties:
        id:
          type: string
          format: uuid
        text:
          type: string
        user_id:
          type: string
          format: uuid
        chat_id:
          type: string
          format: uuid
        read_by:
          type: array
          items:
            - type: string
              format: uuid
    NewChatMessageRequest:
      type: object
      properties:
        text:
          type: string
        user_id:
          type: string
          format: uuid